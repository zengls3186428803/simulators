!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DATAGRAM	datagram.h	2;"	d
Event	event_manager.h	/^struct Event{$/;"	s
Event	event_manager.h	/^typedef struct Event Event;$/;"	t	typeref:struct:Event
Event::entity	event_manager.h	/^	Event_who entity;$/;"	m	struct:Event	access:public
Event::info	event_manager.h	/^	void *info;$/;"	m	struct:Event	access:public
Event::next	event_manager.h	/^	struct Event *next;$/;"	m	struct:Event	typeref:struct:Event::Event	access:public
Event::prev	event_manager.h	/^	struct Event *prev;$/;"	m	struct:Event	typeref:struct:Event::Event	access:public
Event::time	event_manager.h	/^	Event_time time;$/;"	m	struct:Event	access:public
Event::what	event_manager.h	/^	Event_what what;$/;"	m	struct:Event	access:public
Event_list	event_manager.h	/^struct Event_list{$/;"	s
Event_list	event_manager.h	/^typedef struct Event_list Event_list;$/;"	t	typeref:struct:Event_list
Event_list::get_event	event_manager.h	/^	Event *(*get_event)(struct Event_list *el);$/;"	m	struct:Event_list	access:public
Event_list::head	event_manager.h	/^	Event *head;$/;"	m	struct:Event_list	access:public
Event_list::insert	event_manager.h	/^	void (*insert)(struct Event_list *el,Event *e);$/;"	m	struct:Event_list	access:public
Event_list::search_by_who_what	event_manager.h	/^	Event *(*search_by_who_what)(struct Event_list *el, Event_who entity, Event_what event_what);$/;"	m	struct:Event_list	access:public
Event_list::show	event_manager.h	/^	void (*show)(struct Event_list *el);$/;"	m	struct:Event_list	access:public
Event_list_Constructor	event_manager.c	/^Event_list * Event_list_Constructor() {$/;"	f
Event_list_Constructor	event_manager.h	/^Event_list * Event_list_Constructor();$/;"	p	signature:()
Event_manager	event_manager.h	/^typedef struct Event_list Event_manager;$/;"	t	typeref:struct:Event_list
Event_manager_Constructor	event_manager.c	/^Event_manager *Event_manager_Constructor() {$/;"	f
Event_manager_Constructor	event_manager.h	/^Event_manager *Event_manager_Constructor();$/;"	p	signature:()
Event_time	event_manager.h	/^typedef double Event_time;$/;"	t
Event_what	event_manager.h	/^typedef int Event_what;$/;"	t
Event_who	event_manager.h	/^typedef int Event_who;$/;"	t
FROM_LAYER2	main.c	8;"	d	file:
INF	main.c	11;"	d	file:
LINKCHANGES	main.c	7;"	d	file:
LINK_CHANGE	main.c	9;"	d	file:
NO	main.c	/^int NO = 0;$/;"	v
Rtpkt	datagram.h	/^struct Rtpkt {$/;"	s
Rtpkt	datagram.h	/^typedef struct Rtpkt Rtpkt;$/;"	t	typeref:struct:Rtpkt
Rtpkt::destid	datagram.h	/^	int destid;         \/* id of router to which pkt being sent $/;"	m	struct:Rtpkt	access:public
Rtpkt::mincost	datagram.h	/^	int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:Rtpkt	access:public
Rtpkt::sourceid	datagram.h	/^	int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:Rtpkt	access:public
TRACE	main.c	/^int TRACE = 1;             \/* for my debugging *\/$/;"	v
YES	main.c	/^int YES = 1;$/;"	v
_EVENT_MANAGER	event_manager.h	2;"	d
_TOOL	tool.h	2;"	d
clocktime	main.c	/^double clocktime = 0.000;$/;"	v
connectcosts1	node1.c	/^int connectcosts1[4] = { 1,  0,  1, 999 };$/;"	v
costs	node0.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
costs	node1.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
costs	node2.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
costs	node3.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
createRtpkt	main.c	/^void createRtpkt(Rtpkt *initRtpkt,int srcid,int destid,int *mincosts) {$/;"	f	signature:(Rtpkt *initRtpkt,int srcid,int destid,int *mincosts)
delete	event_manager.c	/^void delete(Event_list *el, Event *e){$/;"	f	signature:(Event_list *el, Event *e)
destid	datagram.h	/^	int destid;         \/* id of router to which pkt being sent $/;"	m	struct:Rtpkt	access:public
destid	node1.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
destid	node2.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
destid	node3.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
distance_table	node0.c	/^struct distance_table $/;"	s	file:
distance_table	node1.c	/^struct distance_table $/;"	s	file:
distance_table	node2.c	/^struct distance_table $/;"	s	file:
distance_table	node3.c	/^struct distance_table $/;"	s	file:
distance_table::costs	node0.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
distance_table::costs	node1.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
distance_table::costs	node2.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
distance_table::costs	node3.c	/^  int costs[4][4];$/;"	m	struct:distance_table	file:	access:public
dt1	node1.c	/^} dt1;$/;"	v	typeref:struct:distance_table
dt2	node2.c	/^} dt2;$/;"	v	typeref:struct:distance_table
dt3	node3.c	/^} dt3;$/;"	v	typeref:struct:distance_table
entity	event_manager.h	/^	Event_who entity;$/;"	m	struct:Event	access:public
event_manager	main.c	/^Event_manager *event_manager;$/;"	v
get_event	event_manager.c	/^Event *get_event(Event_list *el) {$/;"	f	signature:(Event_list *el)
get_event	event_manager.h	/^	Event *(*get_event)(struct Event_list *el);$/;"	m	struct:Event_list	access:public
get_event	event_manager.h	/^Event *get_event(Event_list *el);$/;"	p	signature:(Event_list *el)
head	event_manager.h	/^	Event *head;$/;"	m	struct:Event_list	access:public
info	event_manager.h	/^	void *info;$/;"	m	struct:Event	access:public
init	main.c	/^void init() {$/;"	f
init	main.c	/^void init();$/;"	p	file:
insert	event_manager.c	/^void insert(Event_list *el,Event *e){$/;"	f	signature:(Event_list *el,Event *e)
insert	event_manager.h	/^	void (*insert)(struct Event_list *el,Event *e);$/;"	m	struct:Event_list	access:public
insert	event_manager.h	/^void insert(Event_list *el,Event *e);$/;"	p	signature:(Event_list *el,Event *e)
jimsrand	tool.c	/^double jimsrand() {$/;"	f
jimsrand	tool.h	/^double jimsrand();$/;"	p	signature:()
linkhandler0	main.c	/^void linkhandler0(int linkid, int newcost);$/;"	p	file:	signature:(int linkid, int newcost)
linkhandler0	node0.c	/^linkhandler0(int linkid, int newcost) {$/;"	f	signature:(int linkid, int newcost)
linkhandler1	main.c	/^void linkhandler1(int linkid, int newcost);$/;"	p	file:	signature:(int linkid, int newcost)
linkhandler1	node1.c	/^linkhandler1(linkid, newcost)   $/;"	f
main	main.c	/^int main() {$/;"	f
mincost	datagram.h	/^	int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:Rtpkt	access:public
mincost	node1.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
mincost	node2.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
mincost	node3.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
next	event_manager.h	/^	struct Event *next;$/;"	m	struct:Event	typeref:struct:Event::Event	access:public
prev	event_manager.h	/^	struct Event *prev;$/;"	m	struct:Event	typeref:struct:Event::Event	access:public
printdt0	node0.c	/^printdt0(struct distance_table *dtptr) {$/;"	f	signature:(struct distance_table *dtptr)
printdt1	node1.c	/^printdt1(dtptr)$/;"	f
printdt2	node2.c	/^printdt2(dtptr)$/;"	f
printdt3	node3.c	/^printdt3(dtptr)$/;"	f
rtinit0	main.c	/^void rtinit0();$/;"	p	file:
rtinit0	node0.c	/^void rtinit0() {$/;"	f
rtinit1	main.c	/^void rtinit1();$/;"	p	file:
rtinit1	node1.c	/^rtinit1() $/;"	f
rtinit2	main.c	/^void rtinit2();$/;"	p	file:
rtinit2	node2.c	/^void rtinit2() $/;"	f
rtinit3	main.c	/^void rtinit3();$/;"	p	file:
rtinit3	node3.c	/^void rtinit3() $/;"	f
rtpkt	node1.c	/^extern struct rtpkt {$/;"	s	file:
rtpkt	node2.c	/^extern struct rtpkt {$/;"	s	file:
rtpkt	node3.c	/^extern struct rtpkt {$/;"	s	file:
rtpkt::destid	node1.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
rtpkt::destid	node2.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
rtpkt::destid	node3.c	/^  int destid;         \/* id of router to which pkt being sent $/;"	m	struct:rtpkt	file:	access:public
rtpkt::mincost	node1.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
rtpkt::mincost	node2.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
rtpkt::mincost	node3.c	/^  int mincost[4];    \/* min cost to node 0 ... 3 *\/$/;"	m	struct:rtpkt	file:	access:public
rtpkt::sourceid	node1.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
rtpkt::sourceid	node2.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
rtpkt::sourceid	node3.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
rtupdate0	main.c	/^void rtupdate0(Rtpkt *);$/;"	p	file:	signature:(Rtpkt *)
rtupdate0	node0.c	/^void rtupdate0(Rtpkt *rcvdpkt)$/;"	f	signature:(Rtpkt *rcvdpkt)
rtupdate1	main.c	/^void rtupdate1(Rtpkt *);$/;"	p	file:	signature:(Rtpkt *)
rtupdate1	node1.c	/^rtupdate1(rcvdpkt)$/;"	f
rtupdate2	main.c	/^void rtupdate2(Rtpkt *);$/;"	p	file:	signature:(Rtpkt *)
rtupdate2	node2.c	/^void rtupdate2(rcvdpkt)$/;"	f
rtupdate3	main.c	/^void rtupdate3(Rtpkt *);$/;"	p	file:	signature:(Rtpkt *)
rtupdate3	node3.c	/^void rtupdate3(rcvdpkt)$/;"	f
search_by_who_what	event_manager.c	/^Event *search_by_who_what(Event_list *el, Event_who entity, Event_what what) {$/;"	f	signature:(Event_list *el, Event_who entity, Event_what what)
search_by_who_what	event_manager.h	/^	Event *(*search_by_who_what)(struct Event_list *el, Event_who entity, Event_what event_what);$/;"	m	struct:Event_list	access:public
search_by_who_what	event_manager.h	/^Event *search_by_who_what(Event_list *el, Event_who entity, Event_what what);$/;"	p	signature:(Event_list *el, Event_who entity, Event_what what)
show	event_manager.c	/^void show(Event_list *el) {$/;"	f	signature:(Event_list *el)
show	event_manager.h	/^	void (*show)(struct Event_list *el);$/;"	m	struct:Event_list	access:public
show	event_manager.h	/^void show(Event_list *el);$/;"	p	signature:(Event_list *el)
sourceid	datagram.h	/^	int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:Rtpkt	access:public
sourceid	node1.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
sourceid	node2.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
sourceid	node3.c	/^  int sourceid;       \/* id of sending router sending this pkt *\/$/;"	m	struct:rtpkt	file:	access:public
time	event_manager.h	/^	Event_time time;$/;"	m	struct:Event	access:public
tolayer2	main.c	/^void tolayer2(Rtpkt packet) {$/;"	f	signature:(Rtpkt packet)
what	event_manager.h	/^	Event_what what;$/;"	m	struct:Event	access:public
